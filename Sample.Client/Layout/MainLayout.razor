@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Sample.Client.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject ProfilePictureService ProfilePictureService

@if (!_isLoaded)
{
    <MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
    <div class="loading-screen">
        <MudProgressLinear Color="Color.Primary" Striped="true" Rounded="true" Indeterminate="true" Size="Size.Medium" Class="my-7" Style="width: 30%;" />
    </div>
}
else
{
    <MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
            <MudSpacer />
            
            <AuthorizeView>
                <Authorized>
                    <MudMenu Dense Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true" FullWidth="true" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <ActivatorContent>
                            @if (_profileImageUrl != null)
                            {
                                <MudAvatar Style="height: 40px; width: 40px; cursor: pointer;">
                                    <MudImage Src="@_profileImageUrl" Alt="Profile" />
                                </MudAvatar>
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" />
                            }
                        </ActivatorContent>
                        <ChildContent>
                            <MudText Typo="Typo.body2" Class="px-4 py-2">
                                @context.User.Identity?.Name
                            </MudText>
                            <MudDivider />
                            <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudMenuItem>
                            <MudMenuItem OnClick="LogoutUser" Icon="@Icons.Material.Filled.ExitToApp">Logout</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </Authorized>
                <NotAuthorized>
                    <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="/login" StartIcon="@Icons.Material.Filled.Login">
                        Login
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="/register" StartIcon="@Icons.Material.Filled.PersonAdd">
                        Register
                    </MudButton>
                </NotAuthorized>
            </AuthorizeView>
            
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        </MudAppBar>
        <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Never" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent Class="pt-16 pa-4">
            @Body
        </MudMainContent>
        <MudAppBar Bottom="true" Fixed="false" Elevation="1">
            <MudGrid Justify="Justify.Center">
                <MudText Style="font-size:small">bezshumu</MudText>
            </MudGrid>
        </MudAppBar>
    </MudLayout>

    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">🗙</span>
    </div>
}

<style>
    .loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: var(--mud-palette-background);
        z-index: 1000;
    }
</style>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private bool _isLoaded = false;
    private MudTheme? _theme = null;
    private string? _profileImageUrl;
    private bool _hasProfilePicture = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "12px",
                DrawerWidthLeft = "280px",
                DrawerWidthRight = "280px",
                AppbarHeight = "64px",
            },
            Typography = new Typography()
            {
                Default =
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "0.875rem",
                    LineHeight = "1.5"
                },
                H1 = 
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "2.5rem",
                    FontWeight = "500"
                },
                H2 = 
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "2rem",
                    FontWeight = "500"
                },
                // Configure other typography elements as needed
                Button = 
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "0.875rem",
                    FontWeight = "500"
                }
            }
        };

        if (OperatingSystem.IsBrowser())
        {
            var storedTheme = await localStorage.GetItemAsync<bool?>("isDarkMode");
            if (storedTheme.HasValue)
            {
                _isDarkMode = storedTheme.Value;
            }

            var storedDrawerState = await localStorage.GetItemAsync<string>("drawerState");
            if (storedDrawerState == "open")
            {
                _drawerOpen = true;
            }
            else if (storedDrawerState == "closed")
            {
                _drawerOpen = false;
            }
        }
        
        // Subscribe to the profile picture change event
        ProfilePictureService.OnProfilePictureChanged += OnProfilePictureChanged;
        
        await LoadProfilePictureAsync();
    }

    private void OnProfilePictureChanged()
    {
        // If there's a URL in the service, use it; otherwise reload from the API
        if (ProfilePictureService.CurrentProfilePictureUrl != null)
        {
            _profileImageUrl = ProfilePictureService.CurrentProfilePictureUrl;
            _hasProfilePicture = true;
        }
        else
        {
            // If the service indicates the picture was cleared, clear it here too
            _profileImageUrl = null;
            _hasProfilePicture = false;
            
            // Since the removal happened elsewhere, we don't need to reload from the API
            // But if we wanted to validate, we could call LoadProfilePictureAsync();
        }
        
        StateHasChanged();
    }

    private async Task LoadProfilePictureAsync()
    {
        try
        {
            var isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
            if (!isAuthenticated)
                return;
                
            // Try to fetch profile picture
            var imageBytes = await AuthService.GetProfilePictureAsync();
            if (imageBytes != null && imageBytes.Length > 0)
            {
                // Determine content type based on bytes
                string contentType = "image/jpeg";
                if (imageBytes.Length > 8 && 
                    imageBytes[0] == 0x89 && 
                    imageBytes[1] == 0x50 && 
                    imageBytes[2] == 0x4E && 
                    imageBytes[3] == 0x47)
                {
                    contentType = "image/png";
                }
                
                // Convert to data URL
                _profileImageUrl = $"data:{contentType};base64,{Convert.ToBase64String(imageBytes)}";
                _hasProfilePicture = true;
                
                // Store the URL in the service (without triggering the event)
                if (ProfilePictureService.CurrentProfilePictureUrl == null)
                {
                    ProfilePictureService.CurrentProfilePictureUrl = _profileImageUrl;
                }
            }
            else
            {
                // Check if user has a profile picture by making a lightweight HEAD request
                try
                {
                    var response = await HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, "api/User/profilepicture"));
                    if (response.IsSuccessStatusCode)
                    {
                        // Use URL with cache-busting
                        _profileImageUrl = $"api/User/profilepicture?t={DateTime.Now.Ticks}";
                        _hasProfilePicture = true;
                        
                        // Store the URL in the service (without triggering the event)
                        if (ProfilePictureService.CurrentProfilePictureUrl == null)
                        {
                            ProfilePictureService.CurrentProfilePictureUrl = _profileImageUrl;
                        }
                    }
                }
                catch
                {
                    // If error occurs, fall back to default icon
                    _profileImageUrl = null;
                    _hasProfilePicture = false;
                }
            }
        }
        catch (Exception)
        {
            // Fall back to default icon if there's any error
            _profileImageUrl = null;
            _hasProfilePicture = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            _isLoaded = true;
            var authState = await localStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(authState))
            {
                _ = await AuthService.LoginWithTokenAsync(authState);
            }
            StateHasChanged();
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;

        if (OperatingSystem.IsBrowser())
        {
            var drawerState = _drawerOpen ? "open" : "closed";
            localStorage.SetItemAsync("drawerState", drawerState);
        }
    }

    private async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        
        if (OperatingSystem.IsBrowser())
        {
            await localStorage.SetItemAsync("isDarkMode", _isDarkMode);
        }
    }
    
    private async Task LogoutUser()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }

    private readonly PaletteLight _lightPalette = new()
    {
        // Main colors from palette
        Primary = "#14213d",      // Dark blue
        Secondary = "#669bbc",    // Light blue
        Tertiary = "#fca311",     // Orange/amber
        
        // Background colors
        Background = "#ffffff",   // White
        Surface = "#ffffff",      // White
        BackgroundGray = "#f5f5f5",
        
        // Appbar
        AppbarText = "#ffffff",   // White text for better contrast
        AppbarBackground = "#14213d", // Dark blue background
        
        // Drawer
        DrawerBackground = "#ffffff",
        DrawerText = "#000000",   // Black text
        DrawerIcon = "#14213d",   // Dark blue icons
        
        // Text colors
        TextPrimary = "#000000",  // Black
        TextSecondary = "#14213d", // Dark blue
        Black = "#000000",
        White = "#ffffff",
        
        // Gray variants
        GrayLight = "#e5e5e5",    // Light gray
        GrayLighter = "#f5f5f5",  // Lighter gray
        
        // Status colors
        Info = "#669bbc",         // Light blue
        Error = "#d32f2f",        // Red (kept for visibility)
        Success = "#4caf50",      // Green (kept for visibility)
        Warning = "#fca311",      // Orange/amber
        
        // Action colors
        ActionDefault = "#14213d", // Dark blue
        ActionDisabled = "#e5e5e5", // Light gray
        ActionDisabledBackground = "#f5f5f5", // Lighter gray
        
        // Line/border colors
        LinesDefault = "#e5e5e5",  // Light gray
        TableLines = "#e5e5e5",    // Light gray
        Divider = "#e5e5e5",       // Light gray
        OverlayLight = "rgba(255,255,255,0.7)",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        // Main colors - soften the palette
        Primary = "#669bbc",          // Keep light blue but consider #7BAFD4 for better visibility
        Secondary = "#fca311",        // Orange/amber is fine
        Tertiary = "#e5e5e5",         // Light gray
        
        // Background colors - changed to black
        Surface = "#000000",          // Changed from #121212 to pure black
        Background = "#000000",       // Changed from #1e1e2d to pure black
        BackgroundGray = "#252536",   // Slightly lighter variant
        
        // Appbar
        AppbarText = "#ffffff",       // White text is fine
        AppbarBackground = "#121212", // Changed to match the new black Surface color
        
        // Drawer
        DrawerBackground = "#121212", // Changed to match the new black Surface color
        DrawerText = "#e5e5e5",       // Light gray is fine
        DrawerIcon = "#7BAFD4",       // Slightly lighter blue for better visibility
        
        // Text colors
        TextPrimary = "#ffffff",      // White
        TextSecondary = "#b8b8b8",    // Softer gray than pure white/light gray
        TextDisabled = "#666666",     // Dark gray
        
        // Gray variants - soften
        GrayLight = "#333344",        // Slight blue tint to gray
        GrayLighter = "#282834",      // Slightly lighter with blue tint
        
        // Status colors - brighten for visibility on dark backgrounds
        Info = "#7BAFD4",             // Lighter blue for contrast
        Success = "#81c784",          // Green
        Warning = "#ffc857",          // Brighter amber
        Error = "#f48771",            // Softer red
        
        // Lines/border colors - soften
        LinesDefault = "#333344",     // Match GrayLight
        TableLines = "#333344",       // Match GrayLight
        Divider = "#333344",          // Match GrayLight
        OverlayLight = "rgba(0,0,0,0.5)",
    };

    // Additional shadow properties can be set in the theme
    private MudTheme AddShadows(MudTheme theme)
    {
        theme.Shadows = new Shadow();
        theme.Shadows.Elevation = new string[]
        {
            "none",
            "0px 2px 4px -1px rgba(0,0,0,0.1)",
            "0px 4px 5px -2px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.14)",
            "0px 12px 17px -7px rgba(0,0,0,0.16)",
            // Add more shadow levels as needed
        };
        return theme;
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.LightMode,
        false => Icons.Material.Outlined.DarkMode,
    };
    
    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        ProfilePictureService.OnProfilePictureChanged -= OnProfilePictureChanged;
    }
}