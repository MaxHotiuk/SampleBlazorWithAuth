@page "/profile"
@using Sample.Client.Models
@using Sample.Client.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject ProfilePictureService ProfilePictureService

<PageTitle>Profile</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <MudPaper Elevation="3" Class="pa-8">
        <MudText Typo="Typo.h4" Class="mb-6" Align="Align.Center">Profile Settings</MudText>
        
        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Large" Class="my-8 mx-auto d-block" />
        }
        else
        {
            <div class="d-flex flex-column align-center mb-6">
                <MudAvatar Size="Size.Large" Class="mb-4" Style="width: 150px; height: 150px;">
                    @if (_profileImageUrl != null)
                    {
                        <MudImage Src="@_profileImageUrl" Alt="Profile" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                    }
                </MudAvatar>
                
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
                    Upload Profile Picture
                </MudButton>
                <InputFile id="fileInput" OnChange="UploadImage" hidden accept=".jpg,.jpeg,.png" />
                
                @if (_hasProfilePicture)
                {
                    <MudButton Variant="Variant.Text" Color="Color.Error" Class="mt-2"
                              OnClick="RemoveProfilePicture">
                        Remove Picture
                    </MudButton>
                }
            </div>
            
            <MudForm @ref="_form" @bind-IsValid="@_isValid">
                <MudTextField @bind-Value="_model.Username" Label="Username" Variant="Variant.Outlined"
                            Required="true" RequiredError="Username is required!" Class="mb-4" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-4">Email: @_model.Email</MudText>
                
                <MudDivider Class="my-6" />
                
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                          Disabled="@(!_isValid || _isSaving)" OnClick="SaveProfileAsync" Class="mt-4">
                    @if (_isSaving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Saving</MudText>
                    }
                    else
                    {
                        <MudText>Save Changes</MudText>
                    }
                </MudButton>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private ProfileModel _model = new();
    private MudForm? _form;
    private bool _isValid;
    private bool _isLoading = true;
    private bool _isSaving = false;
    private bool _hasProfilePicture = false;
    private string? _profileImageUrl;
    private IBrowserFile? _selectedFile;
    
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        
        await LoadUserProfileAsync();
    }
    
    private async Task LoadUserProfileAsync()
    {
        try
        {
            _isLoading = true;
            var response = await HttpClient.GetFromJsonAsync<ProfileModel>("api/User/profile");
            
            if (response != null)
            {
                _model = response;
                _hasProfilePicture = response.HasProfilePicture;
                
                if (_hasProfilePicture)
                {
                    // Use AuthService to get profile picture bytes
                    var imageBytes = await AuthService.GetProfilePictureAsync();
                    if (imageBytes != null && imageBytes.Length > 0)
                    {
                        // Determine content type based on bytes
                        string contentType = "image/jpeg";
                        if (imageBytes.Length > 8 && 
                            imageBytes[0] == 0x89 && 
                            imageBytes[1] == 0x50 && 
                            imageBytes[2] == 0x4E && 
                            imageBytes[3] == 0x47)
                        {
                            contentType = "image/png";
                        }
                        
                        // Convert to data URL
                        _profileImageUrl = $"data:{contentType};base64,{Convert.ToBase64String(imageBytes)}";
                        
                        // Update the service with the current URL
                        ProfilePictureService.CurrentProfilePictureUrl = _profileImageUrl;
                    }
                    else
                    {
                        // Fallback to URL with cache-busting
                        _profileImageUrl = $"api/User/profilepicture?t={DateTime.Now.Ticks}";
                        
                        // Update the service with the current URL
                        ProfilePictureService.CurrentProfilePictureUrl = _profileImageUrl;
                    }
                }
                else
                {
                    // If no profile picture, clear the service
                    ProfilePictureService.ClearProfilePicture();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
                return;
                
            // Validate file type
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
            var fileExtension = Path.GetExtension(file.Name).ToLowerInvariant();
            
            if (!allowedExtensions.Contains(fileExtension))
            {
                Snackbar.Add("Only JPG and PNG images are supported.", Severity.Warning);
                return;
            }
            
            // Validate file size (max 2MB)
            if (file.Size > 2 * 1024 * 1024)
            {
                Snackbar.Add("Image size must be less than 2MB.", Severity.Warning);
                return;
            }
            
            _selectedFile = file;
            
            // Create a temporary URL for preview
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024).ReadAsync(buffer);
            var imageType = fileExtension.Replace(".", "");
            _profileImageUrl = $"data:image/{imageType};base64,{Convert.ToBase64String(buffer)}";
            
            _hasProfilePicture = true;
            
            // Don't update the service yet - wait for save
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing image: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task RemoveProfilePicture()
    {
        try
        {
            var response = await HttpClient.DeleteAsync("api/User/profilepicture");
            
            if (response.IsSuccessStatusCode)
            {
                _profileImageUrl = null;
                _hasProfilePicture = false;
                _selectedFile = null;
                
                // Update the service to notify other components
                ProfilePictureService.ClearProfilePicture();
                
                Snackbar.Add("Profile picture removed successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to remove profile picture.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task SaveProfileAsync()
    {
        try
        {
            _isSaving = true;
            
            // Update username first
            var updateResponse = await HttpClient.PutAsJsonAsync("api/User/profile", _model);
            
            if (!updateResponse.IsSuccessStatusCode)
            {
                var error = await updateResponse.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update profile: {error}", Severity.Error);
                return;
            }
            
            // Upload profile picture if selected
            if (_selectedFile != null)
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(_selectedFile.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024));
                content.Add(fileContent, "file", _selectedFile.Name);
                
                var pictureResponse = await HttpClient.PostAsync("api/User/profilepicture", content);
                
                if (!pictureResponse.IsSuccessStatusCode)
                {
                    var error = await pictureResponse.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to upload profile picture: {error}", Severity.Error);
                    return;
                }
                
                // Update the service with the current URL
                ProfilePictureService.CurrentProfilePictureUrl = _profileImageUrl;
            }
            
            Snackbar.Add("Profile updated successfully!", Severity.Success);
            await LoadUserProfileAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }
}